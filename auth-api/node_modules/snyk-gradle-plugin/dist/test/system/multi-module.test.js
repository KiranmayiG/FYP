"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path = require("path");
var common_1 = require("../common");
var tap_1 = require("tap");
var lib_1 = require("../../lib");
tap_1.test('multi-project, explicitly targeting a subproject build file', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-project'), 'subproj', 'build.gradle'))];
            case 1:
                result = _a.sent();
                t.equals(result.package.name, '.', 'root project is "."');
                t.equal(result.package
                    .dependencies['com.android.tools.build:builder']
                    .dependencies['com.android.tools:sdklib']
                    .dependencies['com.android.tools:repository']
                    .dependencies['com.android.tools:common']
                    .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version found');
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project, ran from root, targeting subproj', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect(common_1.fixtureDir('multi-project'), 'subproj/build.gradle')];
            case 1:
                result = _a.sent();
                t.equals(result.package.name, 'multi-project', 'root project is "multi-project"');
                t.equal(result.package
                    .dependencies['com.android.tools.build:builder']
                    .dependencies['com.android.tools:sdklib']
                    .dependencies['com.android.tools:repository']
                    .dependencies['com.android.tools:common']
                    .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version found');
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project, ran from a subproject directory', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect(path.join(common_1.fixtureDir('multi-project'), 'subproj'), 'build.gradle')];
            case 1:
                result = _a.sent();
                t.equals(result.package.name, 'subproj', 'root project is "subproj"');
                t.equal(result.package
                    .dependencies['com.android.tools.build:builder']
                    .dependencies['com.android.tools:sdklib']
                    .dependencies['com.android.tools:repository']
                    .dependencies['com.android.tools:common']
                    .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version found');
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project: only sub-project has deps and they are returned', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var options, result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                options = {
                    'gradle-sub-project': 'subproj',
                };
                return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-project'), 'build.gradle'), options)];
            case 1:
                result = _a.sent();
                t.match(result.package.name, '/subproj', 'sub project name is included in the root pkg name');
                t.equal(result.package
                    .dependencies['com.android.tools.build:builder']
                    .dependencies['com.android.tools:sdklib']
                    .dependencies['com.android.tools:repository']
                    .dependencies['com.android.tools:common']
                    .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version found');
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project: only sub-project has deps, none returned for main', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-project'), 'build.gradle'))];
            case 1:
                result = _a.sent();
                t.match(result.package.name, '.', 'returned project name is not sub-project');
                t.notOk(result.package.dependencies);
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project: using gradle 3.0.0 via wrapper', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-project-gradle-3'), 'build.gradle'))];
            case 1:
                result = _a.sent();
                t.match(result.package.name, '.', 'returned project name is not sub-project');
                t.notOk(result.package.dependencies);
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project: parallel is handled correctly', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect(common_1.fixtureDir('multi-project-parallel'), 'build.gradle')];
            case 1:
                result = _a.sent();
                t.match(result.package.name, 'multi-project-parallel', 'expected project name');
                t.ok(result.package.dependencies);
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project: only sub-project has deps and they are returned space needs trimming', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var options, result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                options = {
                    'gradle-sub-project': 'subproj ',
                };
                return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-project'), 'build.gradle'), options)];
            case 1:
                result = _a.sent();
                t.match(result.package.name, '/subproj', 'sub project name is included in the root pkg name');
                t.equal(result.package
                    .dependencies['com.android.tools.build:builder']
                    .dependencies['com.android.tools:sdklib']
                    .dependencies['com.android.tools:repository']
                    .dependencies['com.android.tools:common']
                    .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version found');
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-project: deps for both projects are returned with multiDepRoots flag', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result, _i, _a, p;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-project'), 'build.gradle'), { multiDepRoots: true })];
            case 1:
                result = _b.sent();
                // It's an array, so we have to scan
                t.equal(result.depRoots.length, 2);
                for (_i = 0, _a = result.depRoots; _i < _a.length; _i++) {
                    p = _a[_i];
                    if (p.depTree.name === '.') {
                        t.notOk(p.depTree.dependencies, 'no dependencies for the main depRoot');
                        t.notOk(p.targetFile, 'no target file returned'); // see targetFileFilteredForCompatibility
                        // t.match(p.targetFile, 'multi-project' + dirSep + 'build.gradle', 'correct targetFile for the main depRoot');
                    }
                    else {
                        t.equal(p.depTree.name, './subproj', 'sub project name is included in the root pkg name');
                        t.equal(p.depTree
                            .dependencies['com.android.tools.build:builder']
                            .dependencies['com.android.tools:sdklib']
                            .dependencies['com.android.tools:repository']
                            .dependencies['com.android.tools:common']
                            .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version found');
                        t.notOk(p.targetFile, 'no target file returned'); // see targetFileFilteredForCompatibility
                        // t.match(p.targetFile, 'subproj' + dirSep + 'build.gradle', 'correct targetFile for the main depRoot');
                    }
                }
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multiDepRoots incompatible with gradle-sub-project', function (t) {
    t.plan(1);
    t.rejects(lib_1.inspect('.', path.join(common_1.fixtureDir('multi-project'), 'build.gradle'), { 'multiDepRoots': true, 'gradle-sub-project': true }));
});
//# sourceMappingURL=multi-module.test.js.map