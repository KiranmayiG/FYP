"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path = require("path");
var common_1 = require("../common");
var tap_1 = require("tap");
var lib_1 = require("../../lib");
var rootNoWrapper = common_1.fixtureDir('no wrapper');
tap_1.test('run inspect()', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect('.', path.join(rootNoWrapper, 'build.gradle'))];
            case 1:
                result = _a.sent();
                t.equal(result.package
                    .dependencies['com.android.tools.build:builder']
                    .dependencies['com.android.tools:sdklib']
                    .dependencies['com.android.tools:repository']
                    .dependencies['com.android.tools:common']
                    .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version found');
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-confg: both compile and runtime deps picked up by default', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-config'), 'build.gradle'))];
            case 1:
                result = _a.sent();
                t.match(result.package.name, '.', 'returned project name is not sub-project');
                t.equal(result.package
                    .dependencies['com.android.tools.build:builder']
                    .dependencies['com.android.tools:sdklib']
                    .dependencies['com.android.tools:repository']
                    .dependencies['com.android.tools:common']
                    .dependencies['com.android.tools:annotations'].version, '25.3.0', 'correct version of compile+runtime dep found');
                t.equal(result.package
                    .dependencies['javax.servlet:servlet-api'].version, '2.5', 'correct version of compileOnly dep found');
                t.equal(Object.keys(result.package.dependencies).length, 6, 'top level deps: 6');
                return [2 /*return*/];
        }
    });
}); });
tap_1.test('multi-confg: only deps for specified conf are picked up', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, lib_1.inspect('.', path.join(common_1.fixtureDir('multi-config'), 'build.gradle'), { args: ['--configuration', 'compileOnly'] })];
            case 1:
                result = _a.sent();
                t.match(result.package.name, '.', 'returned project name is not sub-project');
                t.notOk(result.package
                    .dependencies['com.android.tools.build:builder'], 'no compile+runtime dep found');
                t.equal(result.package
                    .dependencies['javax.servlet:servlet-api'].version, '2.5', 'correct version of compileOnly dep found');
                t.equal(Object.keys(result.package.dependencies).length, 1, 'top level deps: 1');
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=plugin.test.js.map