"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var os = require("os");
var path = require("path");
var common_1 = require("../common");
var tap_1 = require("tap");
var sinon_1 = require("sinon");
var subProcess = require("../../lib/sub-process");
var lib_1 = require("../../lib");
var rootNoWrapper = common_1.fixtureDir('no wrapper');
var rootWithWrapper = common_1.fixtureDir('with-wrapper');
var subWithWrapper = common_1.fixtureDir('with-wrapper-in-root');
tap_1.test('darwin without wrapper', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var _a, cmd;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                stubPlatform('darwin', t);
                stubSubProcessExec(t);
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                return [4 /*yield*/, lib_1.inspect(rootNoWrapper, 'build.gradle')];
            case 2:
                _b.sent();
                t.fail('Expected failure');
                return [3 /*break*/, 4];
            case 3:
                _a = _b.sent();
                cmd = subProcess.execute.getCall(0).args[0];
                t.same(cmd, 'gradle', 'invokes gradle directly');
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); });
tap_1.test('darwin with wrapper', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var _a, cmd, expectedCmd;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                stubPlatform('darwin', t);
                stubSubProcessExec(t);
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                return [4 /*yield*/, lib_1.inspect(rootWithWrapper, 'build.gradle')];
            case 2:
                _b.sent();
                t.fail('Expected failure');
                return [3 /*break*/, 4];
            case 3:
                _a = _b.sent();
                cmd = subProcess.execute.getCall(0).args[0];
                expectedCmd = path.join(rootWithWrapper, 'gradlew');
                t.same(cmd, expectedCmd, 'invokes wrapper script');
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); });
tap_1.test('darwin with wrapper in root', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var _a, cmd, expectedCmd;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                stubPlatform('darwin', t);
                stubSubProcessExec(t);
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                return [4 /*yield*/, lib_1.inspect(subWithWrapper, path.join('app', 'build.gradle'))];
            case 2:
                _b.sent();
                t.fail('Expected failure');
                return [3 /*break*/, 4];
            case 3:
                _a = _b.sent();
                cmd = subProcess.execute.getCall(0).args[0];
                expectedCmd = path.join(subWithWrapper, 'gradlew');
                t.same(cmd, expectedCmd, 'invokes wrapper script');
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); });
function stubPlatform(platform, t) {
    sinon_1.stub(os, 'platform')
        .callsFake(function () {
        return platform;
    });
    t.teardown(os.platform.restore);
}
function stubSubProcessExec(t) {
    sinon_1.stub(subProcess, 'execute')
        .callsFake(function () {
        return Promise.reject(new Error('abort'));
    });
    t.teardown(subProcess.execute.restore);
}
//# sourceMappingURL=darwin.test.js.map